<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AdminActionEditTeamSettings" xml:space="preserve">
    <value>edit team settings</value>
    <comment>Action for edit team settings</comment>
  </data>
  <data name="AdminActionGeneratePairs" xml:space="preserve">
    <value>generate pairs</value>
    <comment>Admin action option for filling into the which teams </comment>
  </data>
  <data name="AdminActionNoTeamMsg" xml:space="preserve">
    <value>The {0} action is only for users who have admin privileges.</value>
    <comment>Message for user who tries to invoke an admin action but are not admins</comment>
  </data>
  <data name="AdminActionNotifyNeedApproval" xml:space="preserve">
    <value>change notify mode to require admin approval</value>
    <comment>Admin action option</comment>
  </data>
  <data name="AdminActionNotifyNoApproval" xml:space="preserve">
    <value>change notify mode to no approval</value>
    <comment>Admin action option</comment>
  </data>
  <data name="AdminActionWhichTeamText" xml:space="preserve">
    <value>Which team do you wish to {0} for?</value>
    <comment>Title for card that asks which team the admin action should be generated for</comment>
  </data>
  <data name="ChatWithMatchButtonText" xml:space="preserve">
    <value>Chat with {0}</value>
    <comment>Button text to initiate a chat with the person the user has been matched up with</comment>
  </data>
  <data name="EditProfileButtonText" xml:space="preserve">
    <value>Edit Profile </value>
    <comment>Edit profile button text</comment>
  </data>
  <data name="ErrorOccured" xml:space="preserve">
    <value>There was an error while processing the request. Retry?</value>
    <comment>A generic message that is sent when there is an error occurring</comment>
  </data>
  <data name="InstallMessageKnownInstallerPart1" xml:space="preserve">
    <value>If you're reading this, it's most likely because {0} added me to the **{1} Team.**</value>
    <comment>Install message and also the welcome message when the app installer is known - {0} is the placeholder for the name of the user that has installed the app to the team, and {1} is the placeholder for the name of the team that the app has been installed to</comment>
  </data>
  <data name="InstallMessageKnownInstallerPart2" xml:space="preserve">
    <value>I get to help you meet more people around your organization by randomly pairing you with someone new every month. You get to make more friends and learn about the people you work with.</value>
    <comment>Part 2 of the install message when the name of the installer is known</comment>
  </data>
  <data name="InstallMessageKnownInstallerPart3" xml:space="preserve">
    <value>**To meet new people, just hang tight. I'll send you an invite when a new month starts.**</value>
    <comment>Part 3 of the install message with the name of the installer known</comment>
  </data>
  <data name="InstallMessageUnknownInstallerPart1" xml:space="preserve">
    <value>If you're reading this, it's because I was installed to **{0} Team.** </value>
    <comment>Install message and also the welcome message when the app installer is not known - {0} is the placeholder for the name of the team that the app has been installed to</comment>
  </data>
  <data name="InstallMessageUnknownInstallerPart2" xml:space="preserve">
    <value>I get to help you meet more people around your organization by randomly pairing you with someone new every month. You get to make more friends and learn about the people you work with.</value>
    <comment>Part 2 of the install message when the name of the installer is not known</comment>
  </data>
  <data name="InstallMessageUnknownInstallerPart3" xml:space="preserve">
    <value>**To meet new people, just hang tight. I'll send you an invite when a new month starts.**</value>
    <comment>Part 3 of the install message when the name of the installer is not known</comment>
  </data>
  <data name="ManualNotifiedUsersErrorMessage" xml:space="preserve">
    <value>Could not notify the users. Please try again or regenerate new pairings.</value>
    <comment>Error message if the pairs could not be notified manually</comment>
  </data>
  <data name="ManualNotifiedUsersMessage" xml:space="preserve">
    <value>Notified {0} pair(s).</value>
    <comment>Message after the pairs have been notified manually</comment>
  </data>
  <data name="MatchUpCardContentPart1" xml:space="preserve">
    <value>Hi there again, I'm {0} in {1}. A bot that pairs you with a new coworker to meet each month.</value>
    <comment>First part of the match up card main content</comment>
  </data>
  <data name="MatchUpCardContentPart2" xml:space="preserve">
    <value>Feel free to set something up :)</value>
    <comment>Second part of the match up card main content</comment>
  </data>
  <data name="MatchUpCardMatchedText" xml:space="preserve">
    <value>You've been matched with **{0}**.</value>
    <comment>The text saying who the user has been matched up with</comment>
  </data>
  <data name="MatchUpCardTitleContent" xml:space="preserve">
    <value>It's time for a match!</value>
    <comment>The title text for the pairup notification adaptive card</comment>
  </data>
  <data name="MeetupContent" xml:space="preserve">
    <value>Hey there, looks like we've been matched by {0} this month. It'd be great to meet up for a coffee or a lunch or a call if you've got time.</value>
    <comment>Content of the Meetup for the propose meeting</comment>
  </data>
  <data name="MeetupTitle" xml:space="preserve">
    <value>{0} / {1} LunchBuddy</value>
    <comment>The title for the Meetup - {0} is the name of the first person that user has been matched with and {1} is the name of the user</comment>
  </data>
  <data name="NewPairingsDescription" xml:space="preserve">
    <value>You have received this message because you are the admin designated for approving new pairings for the team.&lt;br/&gt;Send the pairings if it looks good, or you may create new pairings.</value>
    <comment>Description for the new pairings text</comment>
  </data>
  <data name="NewPairingsOddPerson" xml:space="preserve">
    <value>Odd Person</value>
    <comment>Odd person in new pairings</comment>
  </data>
  <data name="NewPairingsTitle" xml:space="preserve">
    <value>New Pairings for {0}</value>
    <comment>The title text for the new pairings card</comment>
  </data>
  <data name="NotifyModeFail" xml:space="preserve">
    <value>Sorry I had a problem updating the notify mode.</value>
    <comment>The text to show when need approval setting failed</comment>
  </data>
  <data name="NotifyModeNeedApprovalSuccess" xml:space="preserve">
    <value>Matches will be sent to the admin for approval before the users are notified of their pairing.</value>
    <comment>The text to show when need approval setting was successfully changed</comment>
  </data>
  <data name="NotifyModeNoApprovalSuccess" xml:space="preserve">
    <value>Matches will be sent to the pairs without asking for admin approval.</value>
    <comment>The text to show when no approval setting was successfully changed</comment>
  </data>
  <data name="OptInConfirmation" xml:space="preserve">
    <value>Welcome back! You've been missed. I've restarted your matches. Have fun!</value>
    <comment>The confirmation reply that is sent when the user resumes the matches</comment>
  </data>
  <data name="OptInUserFailText" xml:space="preserve">
    <value>Sorry, I had trouble opting you back in. Retry?</value>
    <comment>Show this text when the user opt in failed</comment>
  </data>
  <data name="OptOutConfirmation" xml:space="preserve">
    <value>All set. I've paused your matches. You can turn them back on whenever you like.</value>
    <comment>The confirmation reply that is sent when the user pauses all matches</comment>
  </data>
  <data name="OptOutUserFailText" xml:space="preserve">
    <value>Sorry, I had trouble opting you out. Retry?</value>
    <comment>Show this text when the user opt out failed</comment>
  </data>
  <data name="PausePairingsButtonText" xml:space="preserve">
    <value>Pause All Matches</value>
    <comment>Button text to pause pairings</comment>
  </data>
  <data name="ProposeMeetupButtonText" xml:space="preserve">
    <value>Propose Meetup</value>
    <comment>Button text to propose the meetup with the match of the user</comment>
  </data>
  <data name="RegeneratePairingsButtonText" xml:space="preserve">
    <value>Create New Pairings</value>
    <comment>Button text to regenerate pairings</comment>
  </data>
  <data name="ResumePairingsButtonText" xml:space="preserve">
    <value>Resume Matches</value>
    <comment>Button text to resume pairings</comment>
  </data>
  <data name="SalutationTitleText" xml:space="preserve">
    <value>Hi there!</value>
    <comment>This is the text for the salutation in the adaptive cards when the bot is installed to a team and also when new users are added to the team</comment>
  </data>
  <data name="SaveProfileFailText" xml:space="preserve">
    <value>Sorry, I could not save the user profile. Retry?</value>
    <comment>Show this text when the user profile could not be saved</comment>
  </data>
  <data name="SendPairingsButtonText" xml:space="preserve">
    <value>Send Pairings</value>
    <comment>Button text to send pairings</comment>
  </data>
  <data name="TakeATourButtonText" xml:space="preserve">
    <value>Take a Tour</value>
    <comment>The text for the button which launches a tour when clicked</comment>
  </data>
  <data name="UnrecognizedInput" xml:space="preserve">
    <value>Hi {0}! Can I help you with any of these actions?</value>
    <comment>The text for the unrecognized input scenario</comment>
  </data>
  <data name="WelcomeTourTitle" xml:space="preserve">
    <value>Tour</value>
    <comment>This is the title of the tour for the Icebreaker Bot</comment>
  </data>
</root>